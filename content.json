[{"title":"日常String、Number、Array、Math和Json方法","date":"2017-03-20T14:36:36.000Z","path":"2017/03/20/日常String、Number、Array、Math和Json方法/","text":"前端日常使用的方法有很多种，为了方便使用和查询，整理如下 字符串方法1234567891011121314String.length() 返回字符串的长度String.charAt() 返回字符串中指定位置的字符String.charCodeAt() 返回指定位置的字符的Unicode 编码String.indexOf() 返回指定值在调用该方法的字符串中首次出现的位置String.lastIndexOf() 返回指定值在调用该方法的字符串中最后出现的位置String.slice() 提取字符串中的一部分，并返回这个新的字符串String.split() 通过一个指定的字符串分隔符，把原字符串分割成一个数组String.substring() 截取指定位置之间的字符串String.substr() 截取指定起始位置和长度的子字符串String.toLowerCase() 把字符串全部转成小写String.toUpperCase() 把字符串全部转成大写String.trim() 去掉字符串首尾的全部空格str.repeat(num) 将str复制几分并返回，num代表复制的次数。str.includes() 参数：1、要查找的字符串2、起始位置返回布尔值 注意 slice(),substr(),substring()方法的不同三种方法都是返回被操作字符串的子字符串，都接受一或者两个参数，第一个参数指定子字符串的开始位置，第二个参数在指定的情况下表示子字符串在哪里结束。具体来说，slice()和substring()的第二个参数指定的是子字符串最后一个字符后面的位置，而==substr() 的第二个参数指定的是返回的字符个数== 数组方法1234567891011121314151617181920212223242526272829303132arr.every(fun) 检测数值元素的每个元素是否都符合条件。arr.filter(fun) 检测数值元素，并返回符合条件所有元素的数组。arr.map(fun) 让数组的每一项都执行一次给定的函数,返回值是数组arr.forEach(fun) 让数组的每一项都执行一次给定的函数arr.some(fun) 检测数组元素中是否有元素符合指定条件。arr.sort(fun) 对数组的元素进行排序arr.push() 添加一个或多个元素到数组的末尾arr.unshift() 添加一个或多个元素到数组的头部arr.pop() 删除数组最后一项元素arr.shift() 删除数组第一个元素arr.concat(arr) 将传入的数组或非数组值与原数组合并,组成一个新的数组并返回arr.reverse() 颠倒数组中元素的位置arr.join(str) 用于把数组中的所有元素通过指定的分隔符进行分隔,放入字符串。arr.slice(num) 截取数组中一部分，并返回这个新的数组arr.splice(num) 用新元素替换旧元素以此修改数组的内容，3个参数，2个参数代表删除arr.toString() 把数组转换为字符串，并返回结果。arr.valueOf() 返回数组对象的原始值。arr.indexOf（） 参数在数组中的下标，返回值为number；-1代表数组中没有这个参数arr.from() 用于将类数组对象转为真正的数组arr.of() 用于将一组参数，转换为数组。 Arr.sort(function(a,b)&#123; //return a - b (从小到大)； //return b - a（从大到小） &#125;) 数组（json）随机排序： Arr.sort(function() &#123; return 0.5 - Math.random(); &#125;)（随机排序） //获取数组元素最小值和最大值 Math.min.apply(null,arr)； Math.max.apply(null,arr)； Math方法1234567891011Math.ceil() 对数进行向上取整Math.floor() 对数进行向下取整Math.round() 对数进行四舍五入Math.abs() 取数的绝对值Math.random() 取0-1之间的随机数，不包含1Math.min() 取（）里面的最小值Math.pow(a,b) a的b次方Math.pow(a,1/b) a的开b次方Math.sqrt(a) a的开方Math.sign() 判断一个数字是正数，负数还是零Math.hypot(...values) 返回所有参数的平方和的平方根(勾股定理) json操作方法12JSON.parse(str); 由JSON字符串转换为JSON对象JSON.stringify(obj); 将JSON对象转化为JSON字符","tags":[{"name":"string","slug":"string","permalink":"https://angeljie889.github.io/tags/string/"},{"name":"number","slug":"number","permalink":"https://angeljie889.github.io/tags/number/"},{"name":"array","slug":"array","permalink":"https://angeljie889.github.io/tags/array/"},{"name":"Math","slug":"Math","permalink":"https://angeljie889.github.io/tags/Math/"}]},{"title":"前端优化","date":"2017-03-20T12:36:36.000Z","path":"2017/03/20/hello-world/","text":"前端是庞大的，包括 HTML、 CSS、 Javascript、Image 、Flash等等各种各样的资源。前端优化是复杂的，针对方方面面的资源都有不同的方式。那么，前端优化的目的是什么 ? 从用户角度而言，优化能够让页面加载得更快、对用户的操作响应得更及时，能够给用户提供更为友好的体验。 从服务商角度而言，优化能够减少页面请求数、或者减小请求所占带宽，能够节省可观的资源。 总之，恰当的优化不仅能够改善站点的用户体验并且能够节省相当的资源利用。前端优化的途径有很多，按粒度大致可以分为两类，第一类是页面级别的优化，例如 HTTP请求数、脚本的无阻塞加载、内联脚本的位置优化等 ;第二类则是代码级别的优化，例如 Javascript中的DOM 操作优化、CSS选择符优化、图片优化以及 HTML结构优化等等。另外，本着提高投入产出比的目的，后文提到的各种优化策略大致按照投入产出比从大到小的顺序排列。 页面级优化 减少 HTTP请求数这条策略基本上所有前端人都知道，而且也是最重要最有效的。都说要减少 HTTP请求，那请求多了到底会怎么样呢 ?首先，每个请求都是有成本的，既包含时间成本也包含资源成本。一个完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。时间成本就是用户需要看到或者 “感受” 到这个资源是必须要等待这个过程结束的，资源上由于每个请求都需要携带数据，因此每个请求都需要占用带宽。另外，由于浏览器进行并发请求的请求数是有上限的 (具体参见此处 )，因此请求数多了以后，浏览器需要分批进行请求，因此会增加用户的等待时间，会给用户造成站点速度慢这样一个印象，即使可能用户能看到的第一屏的资源都已经请求完了，但是浏览器的进度条会一直存在。","tags":[]}]